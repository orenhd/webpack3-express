import jwt from 'jsonwebtoken';

import { UserModel } from '../models/user.model';
import * as userConsts from '../consts/user.consts';

import config from '../config';

export const user_signup = (req, res, next) => {

	UserModel.create({
		username: req.body.username,
		password: req.body.password
	}, (err) => {
		if (err) {
			next(err);
		} else {
			res.status(200).json({ success: true });
		}
	});
};

export const user_login = (req, res, next) => {
	UserModel.findOne({ username: req.body.username }).select('+password').exec((err, user) => {
		if (err) {
			next(err);
		} else if (user) {
			// test a matching password
			user.comparePassword(req.body.password, (err, isMatch) => {
				if (err) {
					next(err);
				} else if (isMatch) {
					/* if user is found and password is right - create a token
					 for demo purposes, I'll be using the _id automatically generated by mongodb as the user id,
					 this is the only property I include in the token for identification of theu user who submitted the request */
					const token = jwt.sign({ _id: user._id }, config.app.at_string, {
						expiresIn: config.app.jwt_life_span
					});

					// return the information including token as JSON
					res.status(200).json({ success: true, data: { token }, message: userConsts.AUTH_SUCCESS_MSG });
				} else {
					res.status(401).json({ success: false, message: userConsts.AUTH_FAILED_PASSWORD_MSG });
				}
			});
		} else {
			res.status(401).json({ success: false, message: userConsts.AUTH_FAILED_USER_MSG });
		}
	});
};

// route middleware to verify a token
export const user_verify_token = (req, res, next) => {

	// check header or url parameters or post parameters for token
	const token = req.body.token || req.query.token || req.headers['x-access-token'];

	// decode token
	if (token) {
		// verifies secret and checks exp
		jwt.verify(token, config.app.at_string, (err, decoded) => {
			if (err) {
				next(err);
			} else {
				// if everything is good, save to request for use in other routes
				req.decoded = decoded;
				next();
			}
		});
	} else {
		// if there is no token - return an error
		return res.status(401).send({ success: false, message: userConsts.MISSING_TOKEN_MSG });
	}
};

export const user_get = (req, res, next) => {
	Promise.all([
		UserModel.findOne({ _id: req.decoded._id }), // retrieve the user who submitted the request
		UserModel.findOne({ 'username': req.params.username }) // retrieve the requested user
	]).then( ([ user, member ]) => {
		if (user && member) {
			const isFriend = member.friends && member.friends.length && member.friends.includes(user._id.toString()) ? true : false; // verify friendship
			res.status(200).json({ success: true, data: { ...member.toObject() , isFriend } });
		} else{
			next();
		}
	}).catch( (err) => {
		next(err);
	});
};

